{"version":3,"sources":["node_modules/browser-pack/_prelude.js","scripts/common.src/components/lightbox/Lightbox.ts","scripts/common.src/components/lightbox/lightbox.init.ts","scripts/common.src/components/lightbox/srcMap.json","scripts/common.src/main.ts"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","CLASS_LIGHTBOX_ACTIVE","CLASS_SLIDE_CURRENT","KEY_ESC","KEY_RIGHT_ARROW","KEY_LEFT_ARROW","KEY_ENTER","Lightbox","container","previewsList","srcMap","buttonClose","controls","_this","this","isShown","lightboxesList","querySelector","slides","currentIndex","currentSlide","currentFocused","currentFocusedIndex","boundDocumentKeyupHandler","documentKeyupHandler","bind","amountOfSlides","childElementCount","Array","prototype","forEach","querySelectorAll","item","index","addEventListener","elementPreviewClickHandler","buttonCloseClickHandler","buttonPrev","buttonNext","buttonPrevClickHandler","buttonNextClickHandler","document","getNextIndex","current","getPrevIndex","getPrevSlide","prev","previousElementSibling","parentElement","lastElementChild","getNextSlide","next","nextElementSibling","firstElementChild","createLightbox","previewElement","callback","previewImage","previewContent","previewSrc","wrapper","image","content","getAttribute","children","createElement","setAttribute","textContent","appendChild","createNextSlide","nextIndex","createPrevSlide","prevIndex","createNextAndPrevSlides","setFocusedPreviewByIndex","classList","remove","add","switchFocusPrev","switchFocusNext","event","currentTarget","show","keyEnterClickHandler","click","documentElement","style","overflow","hide","keyCode","Object","defineProperty","value","init","lightboxesContainer","images","Lightbox_1","default","images/preview/image1_150.jpg","images/preview/image2_150.jpg","images/preview/image3_150.jpg","images/preview/image4_150.jpg","images/preview/image5_150.jpg","images/preview/image6_150.jpg","images/preview/image7_150.jpg","images/preview/image8_150.jpg","images/preview/image9_150.jpg","images/preview/image10_150.jpg","images/preview/image11_150.jpg","images/preview/image12_150.jpg","images/preview/image13_150.jpg","images/preview/image14_150.jpg","images/preview/image15_150.jpg","images/preview/image16_150.jpg","lightbox_init_1"],"mappings":"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","file":"common.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* Classes for states */\nconst CLASS_LIGHTBOX_ACTIVE: string = 'active';\nconst CLASS_SLIDE_CURRENT: string = 'current';\n\n/* Key codes */\nconst KEY_ESC: number = 27;\nconst KEY_RIGHT_ARROW: number = 39;\nconst KEY_LEFT_ARROW: number = 37;\nconst KEY_ENTER: number = 13;\n\n\n\nexport default class Lightbox\n{\n    private boundDocumentKeyupHandler: ( event: KeyboardEvent ) => void;\n    private isShown: boolean;\n\n    /**\n    * Main element\n    * @type {HTMLElement}\n    */\n    private container: HTMLElement;\n    /**\n     * Array of lightboxes\n     * @type {HTMLLIElement[]}\n     */\n    private slides: HTMLLIElement[];\n\n    private previewsList: HTMLOListElement;\n    private lightboxesList: HTMLOListElement;\n\n    private currentIndex: number;\n    private currentSlide: HTMLLIElement;\n\n    private currentFocused: HTMLLIElement;\n    private currentFocusedIndex: number;\n    private amountOfSlides: number;\n    private srcMap: any;\n\n    /**\n     * Constructor\n     * @param {HTMLElement} container - wrapper for list of lightboxes\n     * @param {HTMLOListElement} previewsList - list of previews\n     * @param {any} srcMap - config for comparison of srcs\n     */\n    public constructor(\n        container: HTMLElement,\n        previewsList: HTMLOListElement,\n        srcMap: any\n    )\n    {\n        let buttonClose: HTMLElement;\n        let controls: HTMLElement;\n\n        this.isShown = false;\n        this.container = container;\n        this.previewsList = previewsList;\n        this.lightboxesList = <HTMLOListElement>container.querySelector( 'ol' );\n        this.slides = [];\n        this.currentIndex = -1;\n        this.currentSlide = null;\n        this.currentFocused = null;\n        this.currentFocusedIndex = 0;\n        this.boundDocumentKeyupHandler = ( this.documentKeyupHandler.bind( this ) );\n        this.amountOfSlides = previewsList.childElementCount - 1;\n        this.srcMap = srcMap;\n\n        Array.prototype.forEach.call(\n            previewsList.querySelectorAll( 'li' ),\n            ( item: HTMLLIElement, index: number ) =>\n            {\n                item.addEventListener(\n                    'click',\n                    this.elementPreviewClickHandler.bind(\n                        this,\n                        index\n                    ),\n                    false );\n            }\n        );\n\n        buttonClose = <HTMLButtonElement>container.querySelector( 'button.close' );\n\n        if ( buttonClose )\n        {\n            buttonClose.addEventListener( 'click', this.buttonCloseClickHandler.bind( this ), false );\n        }\n\n        controls = <HTMLElement>container.querySelector( '.controls' );\n\n        if ( controls )\n        {\n            let buttonPrev: HTMLButtonElement;\n            let buttonNext: HTMLButtonElement;\n\n            buttonPrev = <HTMLButtonElement>controls.querySelector( 'button.prev' );\n\n            if ( buttonPrev )\n            {\n                buttonPrev.addEventListener( 'click', this.buttonPrevClickHandler.bind( this ), false );\n            }\n\n            buttonNext = <HTMLButtonElement>controls.querySelector( 'button.next' );\n\n            if ( buttonNext )\n            {\n                buttonNext.addEventListener( 'click', this.buttonNextClickHandler.bind( this ), false );\n            }\n        }\n\n        document.addEventListener( 'keyup', this.boundDocumentKeyupHandler );\n    }\n\n    /**\n     * Get next index for list of previews\n     * and for list of lightboxes as well\n     * @param {number} current - current index\n     */\n    private getNextIndex( current: number ): number\n    {\n        return current === this.amountOfSlides ? 0 : ( current + 1 );\n    }\n\n    /**\n     * Get previous index for list of previews\n     * and for list of lightboxes as well\n     * @param {number} current - current index\n     */\n    private getPrevIndex( current: number ): number\n    {\n        return current ? ( current - 1 ) : this.amountOfSlides;\n    }\n\n    /**\n     * Get previous lightbox\n     * @param {HTMLLIElement} current - current lightbox\n     * @returns {HTMLLIElement} - previous lightbox\n     */\n    private getPrevSlide( current: HTMLLIElement ): HTMLLIElement\n    {\n        let prev: HTMLLIElement;\n\n        prev = <HTMLLIElement>current.previousElementSibling;\n\n        if( !prev )\n        {\n            prev = <HTMLLIElement>current.parentElement.lastElementChild;\n        }\n\n        return prev;\n    }\n\n    /**\n     * Get next lightbox\n     * @param {HTMLLIElement} current - current lightbox\n     * @returns {HTMLLIElement} - next lightbox\n     */\n    private getNextSlide( current: HTMLLIElement ): HTMLLIElement\n    {\n        let next: HTMLLIElement;\n\n        next = <HTMLLIElement>current.nextElementSibling;\n\n        if ( !next )\n        {\n            next = <HTMLLIElement>current.parentElement.firstElementChild;\n        }\n\n        return next;\n    }\n\n    /**\n     * Create lightbox for current preview\n     * @param {number} index - number of creating lightbox\n     * @param {HTMLLIElement} previewElement - current preview element\n     * @param {Function} callback\n     * @returns {HTMLLIElement} - created lightbox\n     */\n    private createLightbox( index: number, previewElement: HTMLLIElement, callback?: Function ): HTMLLIElement\n    {\n        let previewImage: HTMLImageElement;\n        let previewContent: HTMLSpanElement;\n\n        let previewSrc: string;\n        var wrapper: HTMLLIElement;\n        let image: HTMLImageElement;\n        let content: HTMLSpanElement;\n\n        previewImage = <HTMLImageElement>previewElement.querySelector( 'img' );\n        previewContent = <HTMLSpanElement>previewElement.querySelector( 'span' );\n\n        previewSrc = previewImage.getAttribute( 'src' );\n        wrapper = <HTMLLIElement>this.lightboxesList.children[index];\n\n        image = <HTMLImageElement>document.createElement( 'IMG' );\n        image.setAttribute( 'src', this.srcMap[previewSrc] );\n        image.setAttribute( 'alt', '' );\n\n        content = <HTMLSpanElement>document.createElement( 'SPAN' );\n        content.textContent = previewContent.textContent;\n\n        wrapper.appendChild( image );\n        wrapper.appendChild( content );\n\n        if ( callback && typeof callback === 'function' )\n        {\n            callback( index, previewElement );\n        }\n\n        return wrapper;\n    }\n\n    /**\n     * Create next lightbox if it doesn't exist\n     * @param {number} index - number of current lightbox\n     * @returns {HTMLLIElement} - created lightbox\n     */\n    private createNextSlide( index: number ): HTMLLIElement\n    {\n        let nextIndex: number;\n\n        nextIndex = this.getNextIndex( index );\n\n        if ( !this.slides[nextIndex] )\n        {\n            this.slides[nextIndex] = this.createLightbox( nextIndex, <HTMLLIElement>this.previewsList.children[nextIndex] );\n        }\n\n        return this.slides[nextIndex];\n    }\n\n    /**\n     * Create previous lightbox if it doesn't exist\n     * @param {number} index - number of current lightbox\n     * @returns {HTMLLIElement} - created lightbox\n     */\n    private createPrevSlide( index: number ): HTMLLIElement\n    {\n        let prevIndex: number;\n\n        prevIndex = this.getPrevIndex( index );\n\n        if ( !this.slides[prevIndex] )\n        {\n            this.slides[prevIndex] = this.createLightbox( prevIndex, <HTMLLIElement>this.previewsList.children[prevIndex] );\n        }\n\n        return this.slides[prevIndex];\n    }\n\n    /**\n     * Create previous and next lightbox if they don't exist\n     * @param {number} index - number of current lightbox\n     */\n    private createNextAndPrevSlides( index: number ): void\n    {\n        this.createNextSlide( index );\n        this.createPrevSlide( index );\n    }\n\n\n    private setFocusedPreviewByIndex( index: number ): void\n    {\n        if ( this.currentFocused )\n        {\n            this.currentFocused.classList.remove( 'focused' );\n        }\n\n        this.currentFocusedIndex = index;\n        this.currentFocused = <HTMLLIElement>this.previewsList.children[this.currentFocusedIndex];\n        this.currentFocused.classList.add( 'focused' );\n    }\n\n    private switchFocusPrev(): void\n    {\n        if ( this.isShown )\n        {\n            this.buttonPrevClickHandler();\n            return;\n        }\n\n        if ( !this.currentFocused )\n        {\n            this.setFocusedPreviewByIndex( 0 );\n            return;\n        }\n\n        this.setFocusedPreviewByIndex(\n            this.getPrevIndex( this.currentFocusedIndex )\n        );\n    }\n\n    private switchFocusNext(): void\n    {\n        if ( this.isShown ) {\n            this.buttonNextClickHandler();\n            return;\n        }\n\n        if ( !this.currentFocused )\n        {\n            this.setFocusedPreviewByIndex( 0 );\n            return;\n        }\n\n        this.setFocusedPreviewByIndex(\n            this.getNextIndex( this.currentFocusedIndex )\n        );\n    }\n\n\n\n\t/**\n     *\n     * @param {number} index - number of current preview element\n     * @param {Event} event\n     */\n    private elementPreviewClickHandler( index: number, event: Event ): void\n    {\n        let previewElement: HTMLLIElement;\n\n        previewElement = <HTMLLIElement>event.currentTarget;\n\n        if ( !this.slides[index] ) {\n            this.slides[index] = this.createLightbox( index, previewElement, this.createNextAndPrevSlides.bind(this) );\n        }\n\n        this.currentSlide = this.slides[index];\n        this.currentIndex = index;\n        this.show();\n    }\n\n    private buttonPrevClickHandler( event?: Event ): void\n    {\n        let prev: HTMLLIElement;\n\n        prev = this.createPrevSlide( this.currentIndex );\n\n        this.currentSlide.classList.remove( CLASS_SLIDE_CURRENT );\n        this.currentSlide = prev;\n        this.currentSlide.classList.add( CLASS_SLIDE_CURRENT );\n        this.currentIndex = this.getPrevIndex( this.currentIndex );\n\n        // preload\n        this.createPrevSlide( this.currentIndex );\n    }\n\n    private buttonNextClickHandler( event?: Event ): void\n    {\n        let next: HTMLLIElement;\n\n        next = this.createNextSlide( this.currentIndex );\n\n        this.currentSlide.classList.remove( CLASS_SLIDE_CURRENT );\n        this.currentSlide = next;\n        this.currentSlide.classList.add( CLASS_SLIDE_CURRENT );\n        this.currentIndex = this.getNextIndex( this.currentIndex );\n\n        // preload\n        this.createNextSlide( this.currentIndex );\n    }\n\n    private keyEnterClickHandler( event: KeyboardEvent ): void\n    {\n        if ( !this.isShown )\n        {\n            this.currentFocused.click();\n        }\n    }\n\n\n\n    /**\n     * Open lightbox\n     */\n    public show(): void\n    {\n        this.container.classList.add( CLASS_LIGHTBOX_ACTIVE );\n\n        if ( this.currentSlide )\n        {\n            this.currentSlide.classList.add( CLASS_SLIDE_CURRENT );\n        }\n\n        this.isShown = true;\n\n        document.documentElement.style.overflow = 'hidden';\n    }\n\n    /**\n     * Close lightbox\n     */\n    public hide(): void\n    {\n        this.container.classList.remove( CLASS_LIGHTBOX_ACTIVE );\n\n        document.documentElement.style.overflow = '';\n\n        if ( this.currentSlide )\n        {\n            this.currentSlide.classList.remove( CLASS_SLIDE_CURRENT );\n            this.currentSlide = null;\n        }\n\n        this.isShown = false;\n        this.setFocusedPreviewByIndex( this.currentIndex );\n        //document.removeEventListener( 'keyup', this.boundDocumentKeyupHandler );\n    }\n\n    private buttonCloseClickHandler( event: Event ): void\n    {\n        this.hide()\n    }\n\n    private documentKeyupHandler( event: KeyboardEvent ): void\n    {\n        switch (event.keyCode) {\n            case KEY_ESC:\n                this.hide();\n                break;\n            case KEY_LEFT_ARROW:\n                this.switchFocusPrev();\n                break;\n            case KEY_RIGHT_ARROW:\n                this.switchFocusNext();\n                break;\n            case KEY_ENTER:\n                this.keyEnterClickHandler( event );\n                break;\n            default:\n                break;\n        }\n    }\n}\n","declare var require: any;\nvar srcMap = require('./srcMap');\n\nimport Lightbox from './Lightbox';\n\n\n\nexport default function init(): void\n{\n\tlet lightboxesContainer: HTMLElement;\n\tlet images: HTMLOListElement;\n\n\tlightboxesContainer = <HTMLElement>document.querySelector( '.lightboxes' );\n\timages = <HTMLOListElement>document.querySelector( '.previews' );\n\n\tnew Lightbox( lightboxesContainer, images, srcMap );\n}\n","module.exports={\"images/preview/image1_150.jpg\":\"images/image1.jpg\",\"images/preview/image2_150.jpg\":\"images/image2.jpg\",\"images/preview/image3_150.jpg\":\"images/image3.jpg\",\"images/preview/image4_150.jpg\":\"images/image4.jpg\",\"images/preview/image5_150.jpg\":\"images/image5.jpg\",\"images/preview/image6_150.jpg\":\"images/image6.jpg\",\"images/preview/image7_150.jpg\":\"images/image7.jpg\",\"images/preview/image8_150.jpg\":\"images/image8.jpg\",\"images/preview/image9_150.jpg\":\"images/image9.jpg\",\"images/preview/image10_150.jpg\":\"images/image10.jpg\",\"images/preview/image11_150.jpg\":\"images/image11.jpg\",\"images/preview/image12_150.jpg\":\"images/image12.jpg\",\"images/preview/image13_150.jpg\":\"images/image13.jpg\",\"images/preview/image14_150.jpg\":\"images/image14.jpg\",\"images/preview/image15_150.jpg\":\"images/image15.jpg\",\"images/preview/image16_150.jpg\":\"images/image16.jpg\"}\n","import lightbox from './components/lightbox/lightbox.init';\n\nlightbox();\n"]}