{"version":3,"sources":["node_modules/browser-pack/_prelude.js","scripts/common.src/components/lightbox/Lightbox.ts","scripts/common.src/components/lightbox/lightbox.init.ts","scripts/common.src/components/lightbox/srcMap.json","scripts/common.src/main.ts"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","CLASS_LIGHTBOX_ACTIVE","CLASS_SLIDE_CURRENT","KEY_ESC","KEY_RIGHT_ARROW","KEY_LEFT_ARROW","KEY_ENTER","Lightbox","container","previewsList","srcMap","buttonClose","controls","_this","this","isShown","lightboxesList","querySelector","slides","currentIndex","currentPreview","currentSlide","currentFocused","currentFocusedIndex","boundDocumentKeyupHandler","documentKeyupHandler","bind","amountOfSlides","childElementCount","Array","prototype","forEach","querySelectorAll","item","index","addEventListener","elementPreviewClickHandler","buttonCloseClickHandler","buttonPrev","buttonNext","buttonPrevClickHandler","buttonNextClickHandler","document","getNextIndex","current","getPrevIndex","getPrevSlide","slide","prev","previousElementSibling","parentElement","lastElementChild","getNextSlide","next","nextElementSibling","firstElementChild","createLightbox","previewElement","callback","previewImage","previewContent","previewSrc","wrapper","image","content","getAttribute","children","createElement","setAttribute","textContent","appendChild","createNextSlide","nextIndex","createPrevSlide","prevIndex","createNextAndPrevSlides","setFocusedPreviewByIndex","classList","remove","add","switchFocusPrev","switchFocusNext","event","currentTarget","show","keyEnterClickHandler","click","documentElement","style","overflow","hide","keyCode","Object","defineProperty","value","init","lightboxesContainer","images","Lightbox_1","default","images/preview/image1_150.jpg","images/preview/image2_150.jpg","images/preview/image3_150.jpg","images/preview/image4_150.jpg","images/preview/image5_150.jpg","images/preview/image6_150.jpg","images/preview/image7_150.jpg","images/preview/image8_150.jpg","images/preview/image9_150.jpg","images/preview/image10_150.jpg","images/preview/image11_150.jpg","images/preview/image12_150.jpg","images/preview/image13_150.jpg","images/preview/image14_150.jpg","images/preview/image15_150.jpg","images/preview/image16_150.jpg","lightbox_init_1"],"mappings":"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","file":"common.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * Класс активного лайтбокса\n * @type {string}\n */\nconst CLASS_LIGHTBOX_ACTIVE: string = 'active';\n/**\n * Класс текущего слайда\n * @type {string}\n */\nconst CLASS_SLIDE_CURRENT: string = 'current';\n/**\n * Код клавиши esc\n * @type {number}\n */\nconst KEY_ESC: number = 27;\n/**/\nconst KEY_RIGHT_ARROW: number = 39;\n/**/\nconst KEY_LEFT_ARROW: number = 37;\n/**/\nconst KEY_ENTER: number = 13;\n\n\n\nexport default class Lightbox\n{\n    /**\n     * Переменная в которой сохраняется функция для обработки нажатия клавиши\n     */\n    private boundDocumentKeyupHandler: ( event: KeyboardEvent ) => void;\n    /**/\n    private isShown: boolean;\n    /**\n     * Элемент лайтбокса\n     */\n    private container: HTMLElement;\n    /**/\n    private previewsList: HTMLOListElement;\n    /**/\n    private lightboxesList: HTMLOListElement;\n\t/**\n     * Массив слайдов\n     */\n    private slides: HTMLLIElement[];\n    /**/\n    private currentIndex: number;\n    /**/\n    private currentPreview: HTMLLIElement;\n\t/**\n     * Текущий слайд\n     */\n    private currentSlide: HTMLLIElement;\n    /**/\n    private currentFocused: HTMLLIElement;\n    /**/\n    private currentFocusedIndex: number;\n    /**/\n    private amountOfSlides: number;\n    /**/\n    private srcMap: any;\n\n    /**\n     * Конструктор\n     * @param {HTMLElement} container\n     * @param {HTMLOListElement} previewsList\n     * @param {any} srcMap\n     */\n    public constructor(\n        container: HTMLElement,\n        previewsList: HTMLOListElement,\n        srcMap: any\n    )\n    {\n        let buttonClose: HTMLElement;\n        let controls: HTMLElement;\n\n        this.isShown = false;\n        this.container = container;\n        this.previewsList = previewsList;\n        this.lightboxesList = <HTMLOListElement>container.querySelector( 'ol' );\n        this.slides = [];\n        this.currentIndex = -1;\n        this.currentPreview = null;\n        this.currentSlide = null;\n        this.currentFocused = null;\n        this.currentFocusedIndex = 0;\n        this.boundDocumentKeyupHandler = ( this.documentKeyupHandler.bind( this ) );\n        this.amountOfSlides = previewsList.childElementCount - 1;\n        this.srcMap = srcMap;\n\n        Array.prototype.forEach.call(\n            previewsList.querySelectorAll( 'li' ),\n            ( item: HTMLLIElement, index: number ) =>\n            {\n                item.addEventListener(\n                    'click',\n                    this.elementPreviewClickHandler.bind(\n                        this,\n                        index\n                    ),\n                    false );\n            }\n        );\n\n        buttonClose = <HTMLButtonElement>container.querySelector( 'button.close' );\n\n        if ( buttonClose )\n        {\n            buttonClose.addEventListener( 'click', this.buttonCloseClickHandler.bind( this ), false );\n        }\n\n        controls = <HTMLElement>container.querySelector( 'div.controls' );\n\n        if ( controls )\n        {\n            let buttonPrev: HTMLButtonElement;\n            let buttonNext: HTMLButtonElement;\n\n            buttonPrev = <HTMLButtonElement>controls.querySelector( 'button.prev' );\n\n            if ( buttonPrev )\n            {\n                buttonPrev.addEventListener( 'click', this.buttonPrevClickHandler.bind( this ), false );\n            }\n\n            buttonNext = <HTMLButtonElement>controls.querySelector( 'button.next' );\n\n            if ( buttonNext )\n            {\n                buttonNext.addEventListener( 'click', this.buttonNextClickHandler.bind( this ), false );\n            }\n        }\n\n        document.addEventListener( 'keyup', this.boundDocumentKeyupHandler );\n    }\n\n    /**/\n    private getNextIndex( current: number ): number\n    {\n        return current === this.amountOfSlides ? 0 : ( current + 1 );\n    }\n\n    /**/\n    private getPrevIndex( current: number ): number\n    {\n        return current ? ( current - 1 ) : this.amountOfSlides;\n    }\n\n    /**\n     * Получение предыдущего слайда\n     * @param {HTMLLIElement} slide - слайд, относительно которого искать\n     * @returns {HTMLLIElement}\n     */\n    private getPrevSlide( slide: HTMLLIElement ): HTMLLIElement\n    {\n        let prev: HTMLLIElement;\n\n        prev = <HTMLLIElement>slide.previousElementSibling;\n\n        if( !prev )\n        {\n            prev = <HTMLLIElement>slide.parentElement.lastElementChild;\n        }\n\n        return prev;\n    }\n\n    /**\n     * Получение следующего слайда\n     * @param {HTMLLIElement} slide - слайд, относительно которого искать\n     * @returns {HTMLLIElement}\n     */\n    private getNextSlide( slide: HTMLLIElement ): HTMLLIElement\n    {\n        let next: HTMLLIElement;\n\n        next = <HTMLLIElement>slide.nextElementSibling;\n\n        if ( !next )\n        {\n            next = <HTMLLIElement>slide.parentElement.firstElementChild;\n        }\n\n        return next;\n    }\n\n    /**/\n    private createLightbox( index: number, previewElement: HTMLLIElement, callback?: Function ): HTMLLIElement\n    {\n        let previewImage: HTMLImageElement;\n        let previewContent: HTMLSpanElement;\n\n        let previewSrc: string;\n        var wrapper: HTMLLIElement;\n        let image: HTMLImageElement;\n        let content: HTMLSpanElement;\n\n        previewImage = <HTMLImageElement>previewElement.querySelector( 'img' );\n        previewContent = <HTMLSpanElement>previewElement.querySelector( 'span' );\n\n        previewSrc = previewImage.getAttribute( 'src' );\n        wrapper = <HTMLLIElement>this.lightboxesList.children[index];\n\n        image = <HTMLImageElement>document.createElement( 'IMG' );\n        image.setAttribute( 'src', this.srcMap[previewSrc] );\n        image.setAttribute( 'alt', '' );\n\n        content = <HTMLSpanElement>document.createElement( 'SPAN' );\n        content.textContent = previewContent.textContent;\n\n        wrapper.appendChild( image );\n        wrapper.appendChild( content );\n\n        if ( callback && typeof callback === 'function' )\n        {\n            callback( index, previewElement );\n        }\n\n        return wrapper;\n    }\n\n    /**/\n    private createNextSlide( index: number, previewElement: HTMLLIElement ): HTMLLIElement\n    {\n        let nextIndex: number;\n\n        nextIndex = this.getNextIndex( index );\n\n        if ( !this.slides[nextIndex] )\n        {\n            this.slides[nextIndex] = this.createLightbox( nextIndex, <HTMLLIElement>this.previewsList.children[nextIndex] );\n        }\n\n        return this.slides[nextIndex];\n    }\n\n    /**/\n    private createPrevSlide( index: number, previewElement: HTMLLIElement ): HTMLLIElement\n    {\n        let prevIndex: number;\n\n        prevIndex = this.getPrevIndex( index );\n\n        if ( !this.slides[prevIndex] )\n        {\n            this.slides[prevIndex] = this.createLightbox( prevIndex, <HTMLLIElement>this.previewsList.children[prevIndex] );\n        }\n\n        return this.slides[prevIndex];\n    }\n\n    /**/\n    private createNextAndPrevSlides( index: number, previewElement: HTMLLIElement ): void\n    {\n        this.createNextSlide( index, previewElement );\n        this.createPrevSlide( index, previewElement );\n    }\n\n    /**/\n    private setFocusedPreviewByIndex( index: number ): void\n    {\n        if ( this.currentFocused )\n        {\n            this.currentFocused.classList.remove( 'focused' );\n        }\n\n        this.currentFocusedIndex = index;\n        this.currentFocused = <HTMLLIElement>this.previewsList.children[this.currentFocusedIndex];\n        this.currentFocused.classList.add( 'focused' );\n    }\n\n    /**/\n    private switchFocusPrev(): void\n    {\n        if ( this.isShown )\n        {\n            this.buttonPrevClickHandler();\n            return;\n        }\n\n        if ( !this.currentFocused )\n        {\n            this.setFocusedPreviewByIndex( 0 );\n            return;\n        }\n\n        this.setFocusedPreviewByIndex(\n            this.getPrevIndex( this.currentFocusedIndex )\n        );\n    }\n\n    /**/\n    private switchFocusNext(): void\n    {\n        if ( this.isShown ) {\n            this.buttonNextClickHandler();\n            return;\n        }\n\n        if ( !this.currentFocused )\n        {\n            this.setFocusedPreviewByIndex( 0 );\n            return;\n        }\n\n        this.setFocusedPreviewByIndex(\n            this.getNextIndex( this.currentFocusedIndex )\n        );\n    }\n\n\n\n\t/**\n     * Обработка нажатия на превью\n     * @param {number} index - номер элемента\n     * @param {Event} event\n     */\n    private elementPreviewClickHandler( index: number, event: Event ): void\n    {\n        let previewElement: HTMLLIElement;\n\n        previewElement = <HTMLLIElement>event.currentTarget;\n\n        if ( !this.slides[index] ) {\n            this.slides[index] = this.createLightbox( index, previewElement, this.createNextAndPrevSlides.bind(this) );\n        }\n\n        this.currentPreview = previewElement;\n        this.currentSlide = this.slides[index];\n        this.currentIndex = index;\n        this.show();\n    }\n\n\t/**\n     * Обработчик нажатия на кнопку переключения на предыдущий слайд\n     * @param {Event} event\n     */\n    private buttonPrevClickHandler( event?: Event ): void\n    {\n        let prev: HTMLLIElement;\n\n        prev = this.createPrevSlide( this.currentIndex, this.currentSlide );\n\n        this.currentSlide.classList.remove( CLASS_SLIDE_CURRENT );\n        this.currentSlide = prev;\n        this.currentSlide.classList.add( CLASS_SLIDE_CURRENT );\n        this.currentIndex = this.getPrevIndex( this.currentIndex );\n\n        // preload\n        this.createPrevSlide( this.currentIndex, this.currentSlide );\n    }\n\n\t/**\n     * Обработчик нажатия на кнопку переключения на следующий слайд\n     * @param {Event} event\n     */\n    private buttonNextClickHandler( event?: Event ): void\n    {\n        let next: HTMLLIElement;\n\n        next = this.createNextSlide( this.currentIndex, this.currentSlide );\n\n        this.currentSlide.classList.remove( CLASS_SLIDE_CURRENT );\n        this.currentSlide = next;\n        this.currentSlide.classList.add( CLASS_SLIDE_CURRENT );\n        this.currentIndex = this.getNextIndex( this.currentIndex );\n\n        // preload\n        this.createNextSlide( this.currentIndex, this.currentSlide );\n    }\n\n    /**/\n    private keyEnterClickHandler( event: KeyboardEvent ): void\n    {\n        if ( !this.isShown )\n        {\n            this.currentFocused.click();\n        }\n    }\n\n\n\n    /**\n     * Функция открытия лайтбокса\n     */\n    public show(): void\n    {\n        this.container.classList.add( CLASS_LIGHTBOX_ACTIVE );\n\n        if ( this.currentSlide )\n        {\n            this.currentSlide.classList.add( CLASS_SLIDE_CURRENT );\n        }\n\n        this.isShown = true;\n\n        document.documentElement.style.overflow = 'hidden';\n    }\n\n    /**\n     * Функция закрытия лайтбокса\n     */\n    public hide(): void\n    {\n        this.container.classList.remove( CLASS_LIGHTBOX_ACTIVE );\n\n        document.documentElement.style.overflow = '';\n\n        if ( this.currentSlide )\n        {\n            this.currentSlide.classList.remove( CLASS_SLIDE_CURRENT );\n            this.currentSlide = null;\n        }\n\n        this.isShown = false;\n        this.setFocusedPreviewByIndex( this.currentIndex );\n        //document.removeEventListener( 'keyup', this.boundDocumentKeyupHandler );\n    }\n\n    /**\n     * Обработчик нажатия на кнопку закрытия лайтбокса\n     * @param {HTMLElement} event\n     */\n    private buttonCloseClickHandler( event: Event ): void\n    {\n        this.hide()\n    }\n\n    /**\n     * Обработчик нажатия на клавишу\n     * @param {KeyboardEvent} event\n     */\n    private documentKeyupHandler( event: KeyboardEvent ): void\n    {\n        switch (event.keyCode) {\n            case KEY_ESC:\n                this.hide();\n                break;\n            case KEY_LEFT_ARROW:\n                this.switchFocusPrev();\n                break;\n            case KEY_RIGHT_ARROW:\n                this.switchFocusNext();\n                break;\n            case KEY_ENTER:\n                this.keyEnterClickHandler( event );\n                break;\n            default:\n                break;\n        }\n    }\n}\n","declare var require: any;\nvar srcMap = require('./srcMap');\n\nimport Lightbox from './Lightbox';\n\n/**\n * Инициализация\n */\nexport default function init(): void\n{\n\tlet lightboxesContainer: HTMLElement;\n\tlet images: HTMLOListElement;\n\n\tlightboxesContainer = <HTMLElement>document.querySelector( '.lightboxes' );\n\timages = <HTMLOListElement>document.querySelector( '.previews' );\n\n\tnew Lightbox( lightboxesContainer, images, srcMap );\n}\n","module.exports={\"images/preview/image1_150.jpg\":\"images/image1.jpg\",\"images/preview/image2_150.jpg\":\"images/image2.jpg\",\"images/preview/image3_150.jpg\":\"images/image3.jpg\",\"images/preview/image4_150.jpg\":\"images/image4.jpg\",\"images/preview/image5_150.jpg\":\"images/image5.jpg\",\"images/preview/image6_150.jpg\":\"images/image6.jpg\",\"images/preview/image7_150.jpg\":\"images/image7.jpg\",\"images/preview/image8_150.jpg\":\"images/image8.jpg\",\"images/preview/image9_150.jpg\":\"images/image9.jpg\",\"images/preview/image10_150.jpg\":\"images/image10.jpg\",\"images/preview/image11_150.jpg\":\"images/image11.jpg\",\"images/preview/image12_150.jpg\":\"images/image12.jpg\",\"images/preview/image13_150.jpg\":\"images/image13.jpg\",\"images/preview/image14_150.jpg\":\"images/image14.jpg\",\"images/preview/image15_150.jpg\":\"images/image15.jpg\",\"images/preview/image16_150.jpg\":\"images/image16.jpg\"}\n","import lightbox from './components/lightbox/lightbox.init';\n\nlightbox();\n"]}